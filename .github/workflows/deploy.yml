name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Git diagnostic
        run: |
          git --version
          git rev-parse --is-inside-work-tree || true
          git status --porcelain || true

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Build
        run: |
          # Se tiver public/CNAME (domínio customizado), base = '/'; caso contrário, '/<repo>/'
          # Considera CNAME válido apenas se existir e tiver uma linha não vazia/nem comentada
          if [ -f public/CNAME ] && grep -Ev '^[[:space:]]*(#|$)' public/CNAME >/dev/null; then
            export BASE_PATH="/"
          else
            export BASE_PATH="/${{ github.event.repository.name }}/"
          fi
          echo "Using BASE_PATH=$BASE_PATH"
          npm run build

      - name: Copy CNAME if present
        run: |
          # Copia CNAME somente se for válido (não vazio/comentado)
          if [ -f public/CNAME ] && grep -Ev '^[[:space:]]*(#|$)' public/CNAME >/dev/null; then
            cp public/CNAME build/CNAME
          fi

      - name: Upload build artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Vite está configurado para gerar em build/
          path: build

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Smoke test (production URL)
        shell: bash
        run: |
          set -euo pipefail
          URL="${{ steps.deployment.outputs.page_url }}"
          if [ -z "$URL" ]; then
            echo "Deploy action didn't return page_url. Skipping smoke test."
            exit 0
          fi
          echo "Probing $URL"
          for i in {1..10}; do
            code=$(curl -I --max-time 10 --silent -o /dev/null -w "%{http_code}" "$URL" || true)
            echo "Attempt $i -> HTTP $code"
            if [ "$code" = "200" ] || [ "$code" = "301" ] || [ "$code" = "308" ]; then
              exit 0
            fi
            sleep 6
          done
          echo "Smoke test failed"
          exit 1
